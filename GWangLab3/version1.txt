import java.util.*;
import java.io.*;

/**
 * This program reads a text file, takes the matrix within and calculates determinant of each matrix
 * @author Guan Yue Wang
 * @version Neon.2 Release (4.6.2)
 * 2017-07-17
 */


public class GWangLab3
{
	
	/**
	 * Main entry point for the program
	 * @param args	hold one command line argument:  [input file location] [output file location] (ex.D:\lab2.txt)
	 * 				(can be left blank, if so program would prompt for file location in console)
	 */
	
	public static void main(String[] args) 
	{
		List			list;
		List[]			listArray;
		GWangLab3		lab;
		int				data;
		int				dimension;
		int				index;
		double			det;
		
		lab = new GWangLab3();
		
		String fileName;
		String outputFile;
		String outputLocation;
		Scanner keyboardInput = new Scanner(System.in);
		
		// GET FILE LOCATION
        if (args.length == 2) 
        {// check if command line argument is valid
            fileName = args[0];
            System.out.println("Input file path: " + fileName);
            outputLocation = args[1];
        }
        else
        {// if no valid command line arguments found, prompt for user input to get input and output files location
        	System.out.println("Invalid I/O file locations.");
    		System.out.print("Please provide input file location (with .txt): ");
    		fileName = keyboardInput.next();
    		System.out.print("Please provide output file location (with .txt): ");
    		outputLocation = keyboardInput.next();
        }
        
		//time test
        //long startTime = System.nanoTime();
        
        // VALIDATION
		
		inputValidation(fileName);	// Check if matrix size and matrix format make sense
		
		System.out.println();
		
		// DATA INPUT
		
		try 
		{
			outputFile = outputLocation;	// read output location
			
			PrintWriter output = new PrintWriter(outputFile);

			
			Scanner infile = new Scanner(new File(fileName));


			while (infile.hasNextDouble()) 
			{	// read till there's no more numbers
				// as file is validated so it always follows size n and then n*n matrix
				
				double size = infile.nextDouble();	// get next size number
				
				int n = (int) size;
				
				listArray = new List[(int)size];
				
				
				for (int i = 0; i < n;i++)
				{	// for each row
					
					list = new List();
					list.setHeader(i);
					
					for (int j = 0; j < n;j++)
					{	// for each column
					list.InsertNode(infile.nextDouble()); // store next
					}
					
					listArray[i] = list;
				}
				
				// Create new Determinant Calculator for current n*n matrix
				det = lab.Determinant(listArray);
				
				// Console Output
				System.out.println(det);
				System.out.println();
				
				output.println(det);
				output.println();
				
				// File Output
				output.println();
	        	       	
	        	// store the end result of the determinant of the matrix
	        	
				
				

			}
			output.close();
			System.out.println("\nOutput File Saved Under - " + outputFile);
		}
		catch (IOException exception) 
		{	// throws exception if there's no existing I/O text data file found
			System.out.print("\nInvalid I/O. Program Terminated.");
			System.exit(1);

		}
		
		// time test
		//long endTime = System.nanoTime();
		//System.out.println("Took "+(endTime - startTime) + " ns");
		
	}	
	
	/**
	 * This method validate if input file follows correct size n + n*n matrix format
	 * @param inputFile	location of the text file to be validated
	 */
	
	public static void inputValidation (String inputFile)
	{
		try 
		{	// read existing text data file
			
			Scanner infile = new Scanner(new File(inputFile));
			int size;
			
			while (infile.hasNextLine()) 
			{	// read each line
				String sizeLine = infile.nextLine();
				String[] sizeN = sizeLine.split(" ");	// store items in each line in a array
				size = Integer.parseInt(sizeN[0]);	//get the first item and treat as size of matrix
				
				if (size<=0 || sizeN.length!=1)
				{	// if size number is not valid or size line contains multiple elements, exit program
					System.out.println("Invalid Size Found In File. Program Terminated");
					System.exit(1);
				}

				for (int i = 0; i<size;i++)
				{ // create for loop based on size to read matrix
					if (infile.hasNextLine())
					{	// if there's next line
						String line = infile.nextLine();	// get next line
						String[] element = line.split(" ");		// store all elements in an array
						if (element.length!=size)
						{	// check if column length is the same as matrix size
							System.out.println("Invalid Matrix Found In File. Program Terminated");
							System.exit(1);
						}
					}
					
					else
					{	// exit loop if it's the end of file
						break;
					}
				}				


			}

		}
		catch (IOException exception) 
		{	// throws exception if there's no existing text data file found
			System.out.print("\nInvalid Input. Program Terminated.");
			System.exit(1);
		}
		
	}
	
	
	public List[] Minor (List[] listArray, int j) {
		
		int		p;
		int		matrixDimension;
		double		data;
		List	list;
		List	minorList;
		List[]	minor;
		
		matrixDimension = listArray[0].listSize();
		
		// if the matrix is 1x1 - return the value in the matrix as the minor.
		// else calculate the minor of the matrix by creating a new array of lists (the minor) which excludes
		// the first row and jth column from the original matrix.
		if (matrixDimension == 1) {
			minor = listArray;
			System.out.println(Arrays.deepToString(minor));
			System.out.println("test");
			return minor;
		}
		else
			minor = new List[matrixDimension-1];
			
			p = 0;
			for (int i = 0; i < matrixDimension; i++) {
				
				list = listArray[i];
				minorList = new List();
				
				if (i == 0)
					continue;
				
				for (int z = 0; z < list.listSize(); z++) {
					
					if (z == j)
						continue;
					
					data = list.nodeValue(z);
					minorList.InsertNode(data);
				}
				
				minor[p] = minorList;

				p++;
			}
			
			return minor;
	}
	
	/**
	 * Compute the determinant of the matrix passed into the application
	 * @param listArray	The original matrix passed into the program and each subsequent matrix created by the method 'minor'.
	 * @return The value of the determinant of the matrix.
	 */
	public double Determinant (List[] listArray) {
				
		List[]		minor;
		List		list;
		int			det;
		int			i;
		double			element;
		
		det = 0;
		i = 0;
		list = listArray[0];
		
		// if the matrix is 1x1 - return that value as the determinant.
		// else compute the sum of the products and return the determinant.
		for (int j = 0; j < listArray[0].listSize(); j++) {
			
			if (list.listSize() == 1) {
				return list.nodeValue(0);
			}
			else
				element = list.nodeValue(j);
				minor = this.Minor(listArray, j);
				det += (int) Math.pow(-1, (i + j))*element*Determinant(minor);
			}

		return det;
	}

}
